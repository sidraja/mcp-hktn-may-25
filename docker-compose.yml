###############################################################################
# SERVICES
###############################################################################
services:

  # 1️⃣  PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: pg-trino
    environment:
      POSTGRES_USER:     trino
      POSTGRES_PASSWORD: trino
      POSTGRES_DB:       trino
      TZ:                UTC
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - trino-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trino -d trino"]
      interval: 5s
      timeout: 5s
      retries: 10

  # 2️⃣  ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:24.4
    container_name: ch-trino
    ports:
      - "8123:8123"      # HTTP
      - "9000:9000"      # Native TCP
    environment:
      CLICKHOUSE_USER:     default
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_DB:       default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      TZ:                  UTC
    volumes:
      - ch-data:/var/lib/clickhouse
    networks:
      - trino-net
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8123/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # 3️⃣  Trino coordinator
  trino:
    image: trinodb/trino:443
    container_name: trino-coordinator
    ports:
      - "8080:8080"
    volumes:
      - ./trino/etc:/etc/trino:ro
    networks:
      - trino-net
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8080/v1/info | grep version"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  # 4️⃣  MCP FastAPI server
  mcp:
    build:
      context: .
    container_name: mcp-server
    command: [                       # ⬅ run uvicorn directly
      "uvicorn",
      "app.main:app",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--log-level", "info"
    ]
    working_dir: /code
    volumes:
      - .:/code
    environment:
      TRINO_HOST: trino
      TRINO_PORT: 8080
      TRINO_USER: mcp-client
      TRINO_HTTP_SCHEME: http
      TRINO_VERIFY_SSL: "false"
      ROW_CAP: 1000
    ports:
      - "8000:8000"
    networks:
      - trino-net
    depends_on:
      trino:
        condition: service_healthy

  # 5️⃣  Metabase (optional BI)
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE:   postgres
      MB_DB_DBNAME: trino
      MB_DB_PORT:   5432
      MB_DB_USER:   trino
      MB_DB_PASS:   trino
      MB_DB_HOST:   postgres
    networks:
      - trino-net
    depends_on:
      postgres:
        condition: service_healthy

###############################################################################
# NETWORK & VOLUMES
###############################################################################
networks:
  trino-net: {}          # just needs a name; default bridge driver

volumes:
  pg-data:
  ch-data:
